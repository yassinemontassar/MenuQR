datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserPlan {
  Gratuit
  Standard
  Pro
}

enum UserRole {
  member
  admin
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  plan          UserPlan      @default(Gratuit)
  expirePlan    DateTime      @default(dbgenerated("NOW() + interval '7 days'"))
  role          UserRole      @default(member)
  menus         Menu[]
  accounts      Account[]
  sessions      Session[]
  planHistories PlanHistory[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PlanHistory {
  id         String   @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime @default(now())
  expirePlan DateTime @default(dbgenerated("NOW() + interval '7 days'"))
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model Menu {
  id            String       @id @default(uuid())
  name          String
  userId        String
  type          String
  startTime     String
  endTime       String
  imageUrl      String
  facebookLink  String?
  instagramLink String?
  published     Boolean      @default(true)
  user          User         @relation(fields: [userId], references: [id])
  categories    Category[]   @relation("MenuToCategory")
  Items         Item[]       @relation("MenuToItem")
  subscribers   Subscriber[] @relation("MenuToSubscriber")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String   @id @default(uuid())
  MenuId    String // Foreign Key to Menu
  Menu      Menu     @relation("MenuToCategory", fields: [MenuId], references: [id])
  name      String
  Items     Item[]   @relation("CategoryToItem")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([MenuId])
}

model Item {
  id          String   @id @default(uuid())
  MenuId      String // Foreign Key to Menu
  Menu        Menu     @relation("MenuToItem", fields: [MenuId], references: [id])
  categoryId  String // Foreign Key to Category
  category    Category @relation("CategoryToItem", fields: [categoryId], references: [id])
  name        String
  description String
  price       Decimal
  discount    Int      @default(0)
  isArchived  Boolean  @default(false)
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([MenuId])
  @@index([categoryId])
}

model Subscriber {
  id        String   @id @default(uuid())
  MenuId    String // Foreign Key to Menu
  Menu      Menu     @relation("MenuToSubscriber", fields: [MenuId], references: [id])
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([MenuId])
}
